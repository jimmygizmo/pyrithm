
Out of 46 tests, 44 exit because max_index == max_index,
but only these 2 exit for another reason. INTERESTING!
* Anyhow these exit rules are changing but the lesson hiding here might still be very important.


BinarySearchIterative running...    Search term: 3
List element count (length): 4
ATTEMPT (1):  min_index: 0    mid_index: 2    max_index: 3
   The term (3) < the mid_index element value (4).  Next search: LEFT side. left_length: 2
   ADJUSTED:  min_index: 0    mid_index: 1    max_index: 1
ATTEMPT (2):  min_index: 0    mid_index: 1    max_index: 1
   The term (3) > the mid_index element value (2).  Next search: RIGHT side. right_length: 0
   ADJUSTED:  min_index: 2    mid_index: 2    max_index: 1
ATTEMPT (3):  min_index: 2    mid_index: 2    max_index: 1
--failed-- to find term.  Exit rule:  mid_index > max_index



BinarySearchIterative running...    Search term: 3
List element count (length): 8
ATTEMPT (1):  min_index: 0    mid_index: 4    max_index: 7
   The term (3) < the mid_index element value (6).  Next search: LEFT side. left_length: 4
   ADJUSTED:  min_index: 0    mid_index: 2    max_index: 3
ATTEMPT (2):  min_index: 0    mid_index: 2    max_index: 3
   The term (3) < the mid_index element value (4).  Next search: LEFT side. left_length: 2
   ADJUSTED:  min_index: 0    mid_index: 1    max_index: 1
ATTEMPT (3):  min_index: 0    mid_index: 1    max_index: 1
   The term (3) > the mid_index element value (2).  Next search: RIGHT side. right_length: 0
   ADJUSTED:  min_index: 2    mid_index: 2    max_index: 1
ATTEMPT (4):  min_index: 2    mid_index: 2    max_index: 1
--failed-- to find term.  Exit rule:  mid_index > max_index


AHA! NOTICE THAT THIS OCCURS FOR ELEMENT COUNT 8 AND ELEMENT COUNT 4 AND OUR EDGE CASE PROBLEM IS FOR ELEMENT COUNT 2.

We seem to have the more interesting edge cases when the element count is even.
Of course, when the count is even .. you cannot easily pick ONE which is in the middle, at the mid_index position.
   in the cases of even element counts, you MUST have a left and a right side with different sizes.
   Since we use FLOOR DIVISION, The left side will always be smaller because we will use the last elemnt of the left
   side as our mid_index, as a side-effect of floor division. These issues would simply switch sides like a mirror
   image if we switched to using CEILING DIVISION. All this is only relevant as to where and how we might solve our
   edge cases. It is important and very valuable to have the full context, the bigger picture, for a fair amount of
   diverse test data .. and to thus understand the real nature of the problem space and your evolving solution space,
   so that you will come up with the most elegant, clean, simple, efficient and side-effect-free solutions for your
   edge cases. Binary search, as it turns out, is and outstanding case study of these principles. There is some
   complexity hiding in the aparent simplicity of some algorithms like binary search, but it need not make your code
   more complex if you come up with an elegant solution. Taking your time is one factor and setting everything up
   and exploring it, in addition to preparing all the unit tests .. all this takes time to do properly, but you'll
   come away with something very valuable and re-usable and that Engineering investment will not have to be made again.
   This is a one-time, high-value investment .. even though this is an academic/educational project; these principles
   apply to commercial code involved in business and the lesson is that it is worth it to invest in a quality code
   base and quality developers. (This is the exception, not the rule, hence I mention it here.)


# Now that I have implemented this my own way from scratch without looking at anyone else's implementation, I will
# compare mine to some others. Here is one:
def binary_search(a, x, lo=0, hi=None):
    if hi is None:
        hi = len(a)
    while lo < hi:
        mid = (lo+hi)//2
        midval = a[mid]
        if midval < x:
            lo = mid+1
        elif midval > x:
            hi = mid
        else:
            return mid
    return -1

From:
https://stackoverflow.com/questions/212358/binary-search-bisection-in-python
(* I'm not cheating at my self-assigned homework/project. I did my own implementation with no influences and now I compare mine to many others.)

This is a decent look at bisect in context of binary search:
https://www.geeksforgeeks.org/binary-search-bisect-in-python/

NOTE: I think the difference between bisect_left and bisect_right in StdLib's bisect is probably that left uses floor division
    to find the mid index and right uses ceiling division to find the mid index. The code only changes slightly.
    TODO: Maybe I should make a right and left version of my own implementation?  (my initial one is a LEFT = floor div)




